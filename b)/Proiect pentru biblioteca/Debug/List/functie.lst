###############################################################################
#
# IAR C/C++ Compiler V6.80.7.1083 for Atmel AVR           17/Jan/2023  17:58:20
# Copyright 1996-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR
#
#    Source file  =  
#        D:\TUIASI AC CTI\anul III\Structura si organizarea
#        calculatoarelor\Proiect\Spre complet\Bonus\Proiect pentru
#        biblioteca\functie.c
#    Command line =  
#        "D:\TUIASI AC CTI\anul III\Structura si organizarea
#        calculatoarelor\Proiect\Spre complet\Bonus\Proiect pentru
#        biblioteca\functie.c" --cpu=m16 -mt -o "D:\TUIASI AC CTI\anul
#        III\Structura si organizarea calculatoarelor\Proiect\Spre
#        complet\Bonus\Proiect pentru biblioteca\Debug\Obj" -lC "D:\TUIASI AC
#        CTI\anul III\Structura si organizarea calculatoarelor\Proiect\Spre
#        complet\Bonus\Proiect pentru biblioteca\Debug\List" -lB "D:\TUIASI AC
#        CTI\anul III\Structura si organizarea calculatoarelor\Proiect\Spre
#        complet\Bonus\Proiect pentru biblioteca\Debug\List"
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --library_module -On
#    Locale       =  Romanian_Romania.1250
#    List file    =  
#        D:\TUIASI AC CTI\anul III\Structura si organizarea
#        calculatoarelor\Proiect\Spre complet\Bonus\Proiect pentru
#        biblioteca\Debug\List\functie.lst
#    Object file  =  
#        D:\TUIASI AC CTI\anul III\Structura si organizarea
#        calculatoarelor\Proiect\Spre complet\Bonus\Proiect pentru
#        biblioteca\Debug\Obj\functie.r90
#
###############################################################################

D:\TUIASI AC CTI\anul III\Structura si organizarea calculatoarelor\Proiect\Spre complet\Bonus\Proiect pentru biblioteca\functie.c
      1          #include "scadere.h"

   \                                 In  segment CODE, align 2, keep-with-next
      2          int adunare(char a,char b){
   \                     adunare:
      3            return a+b;
   \   00000000   2F20               MOV     R18, R16
   \   00000002   E030               LDI     R19, 0
   \   00000004   2F41               MOV     R20, R17
   \   00000006   E050               LDI     R21, 0
   \   00000008   0F24               ADD     R18, R20
   \   0000000A   1F35               ADC     R19, R21
   \   0000000C   0189               MOVW    R17:R16, R19:R18
   \   0000000E   9508               RET
      4          }

   \                                 In  segment CODE, align 2, keep-with-next
      5          char scadere(char a,char b){
   \                     scadere:
      6            return a-b;
   \   00000000   1B01               SUB     R16, R17
   \   00000002   9508               RET
      7          }

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   adunare
      2   scadere


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  adunare
       4  scadere

 
 20 bytes in segment CODE
 
 20 bytes of CODE memory

Errors: none
Warnings: none
